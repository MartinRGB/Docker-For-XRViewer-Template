worker_processes  8;
worker_rlimit_nofile 12000;
events {
    use epoll;
    worker_connections  12000;
    multi_accept    on;
}

http  {

  include     mime.types;
  default_type        application/octet-stream;
  sendfile        on;
  tcp_nopush     on;
  tcp_nodelay on;
  #keepalive_timeout  0;
  keepalive_timeout  65;
  gzip  on;
  client_max_body_size    8192m;
  client_body_buffer_size 128k;

  server {
    listen      8015 ssl;
    # https 监听端口，https端口不可使用docker端口转发，宿主机与容器内端口需配置一致，否则无法访问
    listen      [::]:8015 ssl;
    server_name  zfile.xrviewer.com localhost 127.0.0.1 172.25.96.1;

    ssl_certificate /etc/nginx/certs/zfile.xrviewer.com+4.pem;
    ssl_certificate_key /etc/nginx/certs/zfile.xrviewer.com+4-key.pem;
    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
    ssl_ciphers HIGH:!aNULL:!MD5;
    
    # 解决跨域问题
    # add_header Access-Control-Allow-Origin '*';

    #   reference:
    #   指定允许跨域的方法，*代表所有
    add_header Access-Control-Allow-Methods *;
    #   预检命令的缓存，如果不缓存每次会发送两次请求
    add_header Access-Control-Max-Age 3600;
    #   带cookie请求需要加上这个字段，并设置为true
    add_header Access-Control-Allow-Credentials true;
    #   表示允许这个域跨域调用（客户端发送请求的域名和端口） 
    #   $http_origin动态获取请求客户端请求的域   不用*的原因是带cookie的请求不支持*号
    add_header Access-Control-Allow-Origin $http_origin;
    #   表示请求头的字段 动态获取
    add_header Access-Control-Allow-Headers 
    $http_access_control_request_headers;

    #   OPTIONS预检命令，预检命令通过时才发送请求
    #   检查请求的类型是不是预检命令
    if ($request_method = OPTIONS){
        return 200;
    }

    location / {
      proxy_set_header Host $host;
      proxy_set_header X-Real-IP $remote_addr;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      # must be real IPv4 IP
      proxy_pass http://172.25.96.1:8555/;
    }

    access_log  logs/access.log;
  }

  server {
    listen 443 ssl http2;
    listen [::]:443 ssl http2;
    server_name zfile.xrviewer.com localhost 127.0.0.1 172.25.96.1;

    ssl_certificate /etc/nginx/certs/zfile.xrviewer.com+4.pem;
    ssl_certificate_key /etc/nginx/certs/zfile.xrviewer.com+4-key.pem;
    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
    ssl_ciphers HIGH:!aNULL:!MD5;

    # #   reference:
    # #   指定允许跨域的方法，*代表所有
    # add_header Access-Control-Allow-Methods *;
    # #   预检命令的缓存，如果不缓存每次会发送两次请求
    # add_header Access-Control-Max-Age 3600;
    # #   带cookie请求需要加上这个字段，并设置为true
    # add_header Access-Control-Allow-Credentials true;
    # #   表示允许这个域跨域调用（客户端发送请求的域名和端口） 
    # #   $http_origin动态获取请求客户端请求的域   不用*的原因是带cookie的请求不支持*号
    # add_header Access-Control-Allow-Origin $http_origin;
    # #   表示请求头的字段 动态获取
    # add_header Access-Control-Allow-Headers 
    # $http_access_control_request_headers;

    # #   OPTIONS预检命令，预检命令通过时才发送请求
    # #   检查请求的类型是不是预检命令
    # if ($request_method = OPTIONS){
    #     return 200;
    # }

    location / {
      proxy_buffering off;
      proxy_set_header Host $host;
      proxy_set_header X-Forwarded-Host $host;
      proxy_set_header X-Forwarded-Proto $scheme;
      proxy_set_header X-Forwarded-Port $server_port;
       # must be real IPv4 IP
      proxy_pass http://172.25.96.1:8555/;
    }

    # Redirect the browser to our port 9443 config
    # return 301 $scheme://172.22.202.91:8222$request_uri;
  }
}

worker_processes  8;
worker_rlimit_nofile 12000;
events {
  use epoll;
  worker_connections  12000;
  multi_accept    on;
}

http  {

  include     mime.types;
  default_type        application/octet-stream;
  sendfile        on;
  tcp_nopush     on;
  tcp_nodelay on;
  #keepalive_timeout  0;
  keepalive_timeout  65;
  gzip  on;
  
  server {
    listen      8099 ssl;
    # https 监听端口，https端口不可使用docker端口转发，宿主机与容器内端口需配置一致，否则无法访问
    listen      [::]:8099 ssl;
    server_name  nginx-ssl.service1.com localhost 127.0.0.1 169.254.213.203;
    root         /var/www/html;

    ssl_certificate /etc/nginx/certs/nginx-ssl.service1.com+4.pem;
    ssl_certificate_key /etc/nginx/certs/nginx-ssl.service1.com+4-key.pem;
    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
    ssl_ciphers HIGH:!aNULL:!MD5;
    
    client_max_body_size 500m;
    #   reference:
    #   指定允许跨域的方法，*代表所有
    add_header Access-Control-Allow-Methods *;
    #   预检命令的缓存，如果不缓存每次会发送两次请求
    add_header Access-Control-Max-Age 3600;
    #   带cookie请求需要加上这个字段，并设置为true
    add_header Access-Control-Allow-Credentials true;
    #   表示允许这个域跨域调用（客户端发送请求的域名和端口） 
    #   $http_origin动态获取请求客户端请求的域   不用*的原因是带cookie的请求不支持*号
    add_header Access-Control-Allow-Origin $http_origin;
    #   表示请求头的字段 动态获取
    add_header Access-Control-Allow-Headers 
    $http_access_control_request_headers;

    #   OPTIONS预检命令，预检命令通过时才发送请求
    #   检查请求的类型是不是预检命令
    if ($request_method = OPTIONS){
        return 200;
    }

    index  index.html;
    
    location / {
      # set password
      # auth_basic "Restricted!";
		  # auth_basic_user_file /etc/nginx/.htpasswd;

      proxy_set_header Host $host;
      proxy_set_header X-Real-IP $remote_addr;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    }

    access_log  logs/access.log;
  }

  server {
    listen 439 ssl http2;
    listen [::]:439 ssl http2;
    server_name nginx-ssl.service1.com localhost 127.0.0.1 169.254.213.203;

    ssl_certificate /etc/nginx/certs/nginx-ssl.service1.com+4.pem;
    ssl_certificate_key /etc/nginx/certs/nginx-ssl.service1.com+4-key.pem;
    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
    ssl_ciphers HIGH:!aNULL:!MD5;

    location / {
      proxy_buffering off;
      proxy_set_header Host $host;
      proxy_set_header X-Forwarded-Host $host;
      proxy_set_header X-Forwarded-Proto $scheme;
      proxy_set_header X-Forwarded-Port $server_port;
      proxy_pass http://169.254.213.203:8099/;
    }

  }
}